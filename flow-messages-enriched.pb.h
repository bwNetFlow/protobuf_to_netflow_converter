// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

#ifndef PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto
#define PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_flow_2dmessages_2denriched_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_flow_2dmessages_2denriched_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_flow_2dmessages_2denriched_2eproto();
namespace flowmessageenriched {
class FlowMessage;
class FlowMessageDefaultTypeInternal;
extern FlowMessageDefaultTypeInternal _FlowMessage_default_instance_;
}  // namespace flowmessageenriched
namespace google {
namespace protobuf {
template<> ::flowmessageenriched::FlowMessage* Arena::CreateMaybeMessage<::flowmessageenriched::FlowMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace flowmessageenriched {

enum FlowMessage_FlowType {
  FlowMessage_FlowType_FLOWUNKNOWN = 0,
  FlowMessage_FlowType_NFV9 = 9,
  FlowMessage_FlowType_IPFIX = 10,
  FlowMessage_FlowType_SFLOW = 5,
  FlowMessage_FlowType_FlowMessage_FlowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FlowMessage_FlowType_FlowMessage_FlowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FlowMessage_FlowType_IsValid(int value);
const FlowMessage_FlowType FlowMessage_FlowType_FlowType_MIN = FlowMessage_FlowType_FLOWUNKNOWN;
const FlowMessage_FlowType FlowMessage_FlowType_FlowType_MAX = FlowMessage_FlowType_IPFIX;
const int FlowMessage_FlowType_FlowType_ARRAYSIZE = FlowMessage_FlowType_FlowType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlowMessage_FlowType_descriptor();
inline const ::std::string& FlowMessage_FlowType_Name(FlowMessage_FlowType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlowMessage_FlowType_descriptor(), value);
}
inline bool FlowMessage_FlowType_Parse(
    const ::std::string& name, FlowMessage_FlowType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowMessage_FlowType>(
    FlowMessage_FlowType_descriptor(), name, value);
}
enum FlowMessage_IPType {
  FlowMessage_IPType_IPUNKNOWN = 0,
  FlowMessage_IPType_IPv4 = 4,
  FlowMessage_IPType_IPv6 = 6,
  FlowMessage_IPType_FlowMessage_IPType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FlowMessage_IPType_FlowMessage_IPType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FlowMessage_IPType_IsValid(int value);
const FlowMessage_IPType FlowMessage_IPType_IPType_MIN = FlowMessage_IPType_IPUNKNOWN;
const FlowMessage_IPType FlowMessage_IPType_IPType_MAX = FlowMessage_IPType_IPv6;
const int FlowMessage_IPType_IPType_ARRAYSIZE = FlowMessage_IPType_IPType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlowMessage_IPType_descriptor();
inline const ::std::string& FlowMessage_IPType_Name(FlowMessage_IPType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlowMessage_IPType_descriptor(), value);
}
inline bool FlowMessage_IPType_Parse(
    const ::std::string& name, FlowMessage_IPType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowMessage_IPType>(
    FlowMessage_IPType_descriptor(), name, value);
}
enum FlowMessage_DirectionType {
  FlowMessage_DirectionType_Unknown = 0,
  FlowMessage_DirectionType_Incoming = 1,
  FlowMessage_DirectionType_Outgoing = 2,
  FlowMessage_DirectionType_FlowMessage_DirectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FlowMessage_DirectionType_FlowMessage_DirectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FlowMessage_DirectionType_IsValid(int value);
const FlowMessage_DirectionType FlowMessage_DirectionType_DirectionType_MIN = FlowMessage_DirectionType_Unknown;
const FlowMessage_DirectionType FlowMessage_DirectionType_DirectionType_MAX = FlowMessage_DirectionType_Outgoing;
const int FlowMessage_DirectionType_DirectionType_ARRAYSIZE = FlowMessage_DirectionType_DirectionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlowMessage_DirectionType_descriptor();
inline const ::std::string& FlowMessage_DirectionType_Name(FlowMessage_DirectionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlowMessage_DirectionType_descriptor(), value);
}
inline bool FlowMessage_DirectionType_Parse(
    const ::std::string& name, FlowMessage_DirectionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowMessage_DirectionType>(
    FlowMessage_DirectionType_descriptor(), name, value);
}
enum FlowMessage_NormalizedType {
  FlowMessage_NormalizedType_No = 0,
  FlowMessage_NormalizedType_Yes = 1,
  FlowMessage_NormalizedType_FlowMessage_NormalizedType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  FlowMessage_NormalizedType_FlowMessage_NormalizedType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool FlowMessage_NormalizedType_IsValid(int value);
const FlowMessage_NormalizedType FlowMessage_NormalizedType_NormalizedType_MIN = FlowMessage_NormalizedType_No;
const FlowMessage_NormalizedType FlowMessage_NormalizedType_NormalizedType_MAX = FlowMessage_NormalizedType_Yes;
const int FlowMessage_NormalizedType_NormalizedType_ARRAYSIZE = FlowMessage_NormalizedType_NormalizedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FlowMessage_NormalizedType_descriptor();
inline const ::std::string& FlowMessage_NormalizedType_Name(FlowMessage_NormalizedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FlowMessage_NormalizedType_descriptor(), value);
}
inline bool FlowMessage_NormalizedType_Parse(
    const ::std::string& name, FlowMessage_NormalizedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowMessage_NormalizedType>(
    FlowMessage_NormalizedType_descriptor(), name, value);
}
// ===================================================================

class FlowMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:flowmessageenriched.FlowMessage) */ {
 public:
  FlowMessage();
  virtual ~FlowMessage();

  FlowMessage(const FlowMessage& from);

  inline FlowMessage& operator=(const FlowMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlowMessage(FlowMessage&& from) noexcept
    : FlowMessage() {
    *this = ::std::move(from);
  }

  inline FlowMessage& operator=(FlowMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlowMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowMessage* internal_default_instance() {
    return reinterpret_cast<const FlowMessage*>(
               &_FlowMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FlowMessage* other);
  friend void swap(FlowMessage& a, FlowMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlowMessage* New() const final {
    return CreateMaybeMessage<FlowMessage>(nullptr);
  }

  FlowMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlowMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlowMessage& from);
  void MergeFrom(const FlowMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FlowMessage_FlowType FlowType;
  static const FlowType FLOWUNKNOWN =
    FlowMessage_FlowType_FLOWUNKNOWN;
  static const FlowType NFV9 =
    FlowMessage_FlowType_NFV9;
  static const FlowType IPFIX =
    FlowMessage_FlowType_IPFIX;
  static const FlowType SFLOW =
    FlowMessage_FlowType_SFLOW;
  static inline bool FlowType_IsValid(int value) {
    return FlowMessage_FlowType_IsValid(value);
  }
  static const FlowType FlowType_MIN =
    FlowMessage_FlowType_FlowType_MIN;
  static const FlowType FlowType_MAX =
    FlowMessage_FlowType_FlowType_MAX;
  static const int FlowType_ARRAYSIZE =
    FlowMessage_FlowType_FlowType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FlowType_descriptor() {
    return FlowMessage_FlowType_descriptor();
  }
  static inline const ::std::string& FlowType_Name(FlowType value) {
    return FlowMessage_FlowType_Name(value);
  }
  static inline bool FlowType_Parse(const ::std::string& name,
      FlowType* value) {
    return FlowMessage_FlowType_Parse(name, value);
  }

  typedef FlowMessage_IPType IPType;
  static const IPType IPUNKNOWN =
    FlowMessage_IPType_IPUNKNOWN;
  static const IPType IPv4 =
    FlowMessage_IPType_IPv4;
  static const IPType IPv6 =
    FlowMessage_IPType_IPv6;
  static inline bool IPType_IsValid(int value) {
    return FlowMessage_IPType_IsValid(value);
  }
  static const IPType IPType_MIN =
    FlowMessage_IPType_IPType_MIN;
  static const IPType IPType_MAX =
    FlowMessage_IPType_IPType_MAX;
  static const int IPType_ARRAYSIZE =
    FlowMessage_IPType_IPType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IPType_descriptor() {
    return FlowMessage_IPType_descriptor();
  }
  static inline const ::std::string& IPType_Name(IPType value) {
    return FlowMessage_IPType_Name(value);
  }
  static inline bool IPType_Parse(const ::std::string& name,
      IPType* value) {
    return FlowMessage_IPType_Parse(name, value);
  }

  typedef FlowMessage_DirectionType DirectionType;
  static const DirectionType Unknown =
    FlowMessage_DirectionType_Unknown;
  static const DirectionType Incoming =
    FlowMessage_DirectionType_Incoming;
  static const DirectionType Outgoing =
    FlowMessage_DirectionType_Outgoing;
  static inline bool DirectionType_IsValid(int value) {
    return FlowMessage_DirectionType_IsValid(value);
  }
  static const DirectionType DirectionType_MIN =
    FlowMessage_DirectionType_DirectionType_MIN;
  static const DirectionType DirectionType_MAX =
    FlowMessage_DirectionType_DirectionType_MAX;
  static const int DirectionType_ARRAYSIZE =
    FlowMessage_DirectionType_DirectionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DirectionType_descriptor() {
    return FlowMessage_DirectionType_descriptor();
  }
  static inline const ::std::string& DirectionType_Name(DirectionType value) {
    return FlowMessage_DirectionType_Name(value);
  }
  static inline bool DirectionType_Parse(const ::std::string& name,
      DirectionType* value) {
    return FlowMessage_DirectionType_Parse(name, value);
  }

  typedef FlowMessage_NormalizedType NormalizedType;
  static const NormalizedType No =
    FlowMessage_NormalizedType_No;
  static const NormalizedType Yes =
    FlowMessage_NormalizedType_Yes;
  static inline bool NormalizedType_IsValid(int value) {
    return FlowMessage_NormalizedType_IsValid(value);
  }
  static const NormalizedType NormalizedType_MIN =
    FlowMessage_NormalizedType_NormalizedType_MIN;
  static const NormalizedType NormalizedType_MAX =
    FlowMessage_NormalizedType_NormalizedType_MAX;
  static const int NormalizedType_ARRAYSIZE =
    FlowMessage_NormalizedType_NormalizedType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NormalizedType_descriptor() {
    return FlowMessage_NormalizedType_descriptor();
  }
  static inline const ::std::string& NormalizedType_Name(NormalizedType value) {
    return FlowMessage_NormalizedType_Name(value);
  }
  static inline bool NormalizedType_Parse(const ::std::string& name,
      NormalizedType* value) {
    return FlowMessage_NormalizedType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bytes SrcIP = 6;
  void clear_srcip();
  static const int kSrcIPFieldNumber = 6;
  const ::std::string& srcip() const;
  void set_srcip(const ::std::string& value);
  #if LANG_CXX11
  void set_srcip(::std::string&& value);
  #endif
  void set_srcip(const char* value);
  void set_srcip(const void* value, size_t size);
  ::std::string* mutable_srcip();
  ::std::string* release_srcip();
  void set_allocated_srcip(::std::string* srcip);

  // bytes DstIP = 7;
  void clear_dstip();
  static const int kDstIPFieldNumber = 7;
  const ::std::string& dstip() const;
  void set_dstip(const ::std::string& value);
  #if LANG_CXX11
  void set_dstip(::std::string&& value);
  #endif
  void set_dstip(const char* value);
  void set_dstip(const void* value, size_t size);
  ::std::string* mutable_dstip();
  ::std::string* release_dstip();
  void set_allocated_dstip(::std::string* dstip);

  // bytes RouterAddr = 11;
  void clear_routeraddr();
  static const int kRouterAddrFieldNumber = 11;
  const ::std::string& routeraddr() const;
  void set_routeraddr(const ::std::string& value);
  #if LANG_CXX11
  void set_routeraddr(::std::string&& value);
  #endif
  void set_routeraddr(const char* value);
  void set_routeraddr(const void* value, size_t size);
  ::std::string* mutable_routeraddr();
  ::std::string* release_routeraddr();
  void set_allocated_routeraddr(::std::string* routeraddr);

  // bytes NextHop = 12;
  void clear_nexthop();
  static const int kNextHopFieldNumber = 12;
  const ::std::string& nexthop() const;
  void set_nexthop(const ::std::string& value);
  #if LANG_CXX11
  void set_nexthop(::std::string&& value);
  #endif
  void set_nexthop(const char* value);
  void set_nexthop(const void* value, size_t size);
  ::std::string* mutable_nexthop();
  ::std::string* release_nexthop();
  void set_allocated_nexthop(::std::string* nexthop);

  // string SrcIfName = 93;
  void clear_srcifname();
  static const int kSrcIfNameFieldNumber = 93;
  const ::std::string& srcifname() const;
  void set_srcifname(const ::std::string& value);
  #if LANG_CXX11
  void set_srcifname(::std::string&& value);
  #endif
  void set_srcifname(const char* value);
  void set_srcifname(const char* value, size_t size);
  ::std::string* mutable_srcifname();
  ::std::string* release_srcifname();
  void set_allocated_srcifname(::std::string* srcifname);

  // string SrcIfDesc = 94;
  void clear_srcifdesc();
  static const int kSrcIfDescFieldNumber = 94;
  const ::std::string& srcifdesc() const;
  void set_srcifdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_srcifdesc(::std::string&& value);
  #endif
  void set_srcifdesc(const char* value);
  void set_srcifdesc(const char* value, size_t size);
  ::std::string* mutable_srcifdesc();
  ::std::string* release_srcifdesc();
  void set_allocated_srcifdesc(::std::string* srcifdesc);

  // string DstIfName = 96;
  void clear_dstifname();
  static const int kDstIfNameFieldNumber = 96;
  const ::std::string& dstifname() const;
  void set_dstifname(const ::std::string& value);
  #if LANG_CXX11
  void set_dstifname(::std::string&& value);
  #endif
  void set_dstifname(const char* value);
  void set_dstifname(const char* value, size_t size);
  ::std::string* mutable_dstifname();
  ::std::string* release_dstifname();
  void set_allocated_dstifname(::std::string* dstifname);

  // string DstIfDesc = 97;
  void clear_dstifdesc();
  static const int kDstIfDescFieldNumber = 97;
  const ::std::string& dstifdesc() const;
  void set_dstifdesc(const ::std::string& value);
  #if LANG_CXX11
  void set_dstifdesc(::std::string&& value);
  #endif
  void set_dstifdesc(const char* value);
  void set_dstifdesc(const char* value, size_t size);
  ::std::string* mutable_dstifdesc();
  ::std::string* release_dstifdesc();
  void set_allocated_dstifdesc(::std::string* dstifdesc);

  // string Peer = 99;
  void clear_peer();
  static const int kPeerFieldNumber = 99;
  const ::std::string& peer() const;
  void set_peer(const ::std::string& value);
  #if LANG_CXX11
  void set_peer(::std::string&& value);
  #endif
  void set_peer(const char* value);
  void set_peer(const char* value, size_t size);
  ::std::string* mutable_peer();
  ::std::string* release_peer();
  void set_allocated_peer(::std::string* peer);

  // string RemoteCountry = 100;
  void clear_remotecountry();
  static const int kRemoteCountryFieldNumber = 100;
  const ::std::string& remotecountry() const;
  void set_remotecountry(const ::std::string& value);
  #if LANG_CXX11
  void set_remotecountry(::std::string&& value);
  #endif
  void set_remotecountry(const char* value);
  void set_remotecountry(const char* value, size_t size);
  ::std::string* mutable_remotecountry();
  ::std::string* release_remotecountry();
  void set_allocated_remotecountry(::std::string* remotecountry);

  // string ProtoName = 101;
  void clear_protoname();
  static const int kProtoNameFieldNumber = 101;
  const ::std::string& protoname() const;
  void set_protoname(const ::std::string& value);
  #if LANG_CXX11
  void set_protoname(::std::string&& value);
  #endif
  void set_protoname(const char* value);
  void set_protoname(const char* value, size_t size);
  ::std::string* mutable_protoname();
  ::std::string* release_protoname();
  void set_allocated_protoname(::std::string* protoname);

  // uint64 TimeRecvd = 2;
  void clear_timerecvd();
  static const int kTimeRecvdFieldNumber = 2;
  ::google::protobuf::uint64 timerecvd() const;
  void set_timerecvd(::google::protobuf::uint64 value);

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::flowmessageenriched::FlowMessage_FlowType type() const;
  void set_type(::flowmessageenriched::FlowMessage_FlowType value);

  // uint32 SequenceNum = 4;
  void clear_sequencenum();
  static const int kSequenceNumFieldNumber = 4;
  ::google::protobuf::uint32 sequencenum() const;
  void set_sequencenum(::google::protobuf::uint32 value);

  // uint64 SamplingRate = 3;
  void clear_samplingrate();
  static const int kSamplingRateFieldNumber = 3;
  ::google::protobuf::uint64 samplingrate() const;
  void set_samplingrate(::google::protobuf::uint64 value);

  // uint64 TimeFlow = 5;
  void clear_timeflow();
  static const int kTimeFlowFieldNumber = 5;
  ::google::protobuf::uint64 timeflow() const;
  void set_timeflow(::google::protobuf::uint64 value);

  // uint64 Bytes = 9;
  void clear_bytes();
  static const int kBytesFieldNumber = 9;
  ::google::protobuf::uint64 bytes() const;
  void set_bytes(::google::protobuf::uint64 value);

  // uint64 Packets = 10;
  void clear_packets();
  static const int kPacketsFieldNumber = 10;
  ::google::protobuf::uint64 packets() const;
  void set_packets(::google::protobuf::uint64 value);

  // .flowmessageenriched.FlowMessage.IPType IPversion = 8;
  void clear_ipversion();
  static const int kIPversionFieldNumber = 8;
  ::flowmessageenriched::FlowMessage_IPType ipversion() const;
  void set_ipversion(::flowmessageenriched::FlowMessage_IPType value);

  // uint32 NextHopAS = 13;
  void clear_nexthopas();
  static const int kNextHopASFieldNumber = 13;
  ::google::protobuf::uint32 nexthopas() const;
  void set_nexthopas(::google::protobuf::uint32 value);

  // uint32 SrcAS = 14;
  void clear_srcas();
  static const int kSrcASFieldNumber = 14;
  ::google::protobuf::uint32 srcas() const;
  void set_srcas(::google::protobuf::uint32 value);

  // uint32 DstAS = 15;
  void clear_dstas();
  static const int kDstASFieldNumber = 15;
  ::google::protobuf::uint32 dstas() const;
  void set_dstas(::google::protobuf::uint32 value);

  // uint32 SrcNet = 16;
  void clear_srcnet();
  static const int kSrcNetFieldNumber = 16;
  ::google::protobuf::uint32 srcnet() const;
  void set_srcnet(::google::protobuf::uint32 value);

  // uint32 DstNet = 17;
  void clear_dstnet();
  static const int kDstNetFieldNumber = 17;
  ::google::protobuf::uint32 dstnet() const;
  void set_dstnet(::google::protobuf::uint32 value);

  // uint32 SrcIf = 18;
  void clear_srcif();
  static const int kSrcIfFieldNumber = 18;
  ::google::protobuf::uint32 srcif() const;
  void set_srcif(::google::protobuf::uint32 value);

  // uint32 DstIf = 19;
  void clear_dstif();
  static const int kDstIfFieldNumber = 19;
  ::google::protobuf::uint32 dstif() const;
  void set_dstif(::google::protobuf::uint32 value);

  // uint32 Proto = 20;
  void clear_proto();
  static const int kProtoFieldNumber = 20;
  ::google::protobuf::uint32 proto() const;
  void set_proto(::google::protobuf::uint32 value);

  // uint32 SrcPort = 21;
  void clear_srcport();
  static const int kSrcPortFieldNumber = 21;
  ::google::protobuf::uint32 srcport() const;
  void set_srcport(::google::protobuf::uint32 value);

  // uint32 DstPort = 22;
  void clear_dstport();
  static const int kDstPortFieldNumber = 22;
  ::google::protobuf::uint32 dstport() const;
  void set_dstport(::google::protobuf::uint32 value);

  // uint32 IPTos = 23;
  void clear_iptos();
  static const int kIPTosFieldNumber = 23;
  ::google::protobuf::uint32 iptos() const;
  void set_iptos(::google::protobuf::uint32 value);

  // uint32 ForwardingStatus = 24;
  void clear_forwardingstatus();
  static const int kForwardingStatusFieldNumber = 24;
  ::google::protobuf::uint32 forwardingstatus() const;
  void set_forwardingstatus(::google::protobuf::uint32 value);

  // uint32 IPTTL = 25;
  void clear_ipttl();
  static const int kIPTTLFieldNumber = 25;
  ::google::protobuf::uint32 ipttl() const;
  void set_ipttl(::google::protobuf::uint32 value);

  // uint64 SrcMac = 27;
  void clear_srcmac();
  static const int kSrcMacFieldNumber = 27;
  ::google::protobuf::uint64 srcmac() const;
  void set_srcmac(::google::protobuf::uint64 value);

  // uint32 TCPFlags = 26;
  void clear_tcpflags();
  static const int kTCPFlagsFieldNumber = 26;
  ::google::protobuf::uint32 tcpflags() const;
  void set_tcpflags(::google::protobuf::uint32 value);

  // uint32 VlanId = 29;
  void clear_vlanid();
  static const int kVlanIdFieldNumber = 29;
  ::google::protobuf::uint32 vlanid() const;
  void set_vlanid(::google::protobuf::uint32 value);

  // uint64 DstMac = 28;
  void clear_dstmac();
  static const int kDstMacFieldNumber = 28;
  ::google::protobuf::uint64 dstmac() const;
  void set_dstmac(::google::protobuf::uint64 value);

  // uint32 Etype = 30;
  void clear_etype();
  static const int kEtypeFieldNumber = 30;
  ::google::protobuf::uint32 etype() const;
  void set_etype(::google::protobuf::uint32 value);

  // uint32 IcmpType = 31;
  void clear_icmptype();
  static const int kIcmpTypeFieldNumber = 31;
  ::google::protobuf::uint32 icmptype() const;
  void set_icmptype(::google::protobuf::uint32 value);

  // uint32 IcmpCode = 32;
  void clear_icmpcode();
  static const int kIcmpCodeFieldNumber = 32;
  ::google::protobuf::uint32 icmpcode() const;
  void set_icmpcode(::google::protobuf::uint32 value);

  // uint32 SrcVlan = 33;
  void clear_srcvlan();
  static const int kSrcVlanFieldNumber = 33;
  ::google::protobuf::uint32 srcvlan() const;
  void set_srcvlan(::google::protobuf::uint32 value);

  // uint32 DstVlan = 34;
  void clear_dstvlan();
  static const int kDstVlanFieldNumber = 34;
  ::google::protobuf::uint32 dstvlan() const;
  void set_dstvlan(::google::protobuf::uint32 value);

  // uint32 FragmentId = 35;
  void clear_fragmentid();
  static const int kFragmentIdFieldNumber = 35;
  ::google::protobuf::uint32 fragmentid() const;
  void set_fragmentid(::google::protobuf::uint32 value);

  // uint32 FragmentOffset = 36;
  void clear_fragmentoffset();
  static const int kFragmentOffsetFieldNumber = 36;
  ::google::protobuf::uint32 fragmentoffset() const;
  void set_fragmentoffset(::google::protobuf::uint32 value);

  // uint32 IPv6FlowLabel = 37;
  void clear_ipv6flowlabel();
  static const int kIPv6FlowLabelFieldNumber = 37;
  ::google::protobuf::uint32 ipv6flowlabel() const;
  void set_ipv6flowlabel(::google::protobuf::uint32 value);

  // uint32 IngressVrfId = 38;
  void clear_ingressvrfid();
  static const int kIngressVrfIdFieldNumber = 38;
  ::google::protobuf::uint32 ingressvrfid() const;
  void set_ingressvrfid(::google::protobuf::uint32 value);

  // uint32 EgressVrfId = 39;
  void clear_egressvrfid();
  static const int kEgressVrfIdFieldNumber = 39;
  ::google::protobuf::uint32 egressvrfid() const;
  void set_egressvrfid(::google::protobuf::uint32 value);

  // uint64 TimeFlowStart = 40;
  void clear_timeflowstart();
  static const int kTimeFlowStartFieldNumber = 40;
  ::google::protobuf::uint64 timeflowstart() const;
  void set_timeflowstart(::google::protobuf::uint64 value);

  // uint64 TimeFlowEnd = 41;
  void clear_timeflowend();
  static const int kTimeFlowEndFieldNumber = 41;
  ::google::protobuf::uint64 timeflowend() const;
  void set_timeflowend(::google::protobuf::uint64 value);

  // uint32 DstIfSpeed = 98;
  void clear_dstifspeed();
  static const int kDstIfSpeedFieldNumber = 98;
  ::google::protobuf::uint32 dstifspeed() const;
  void set_dstifspeed(::google::protobuf::uint32 value);

  // .flowmessageenriched.FlowMessage.DirectionType Direction = 90;
  void clear_direction();
  static const int kDirectionFieldNumber = 90;
  ::flowmessageenriched::FlowMessage_DirectionType direction() const;
  void set_direction(::flowmessageenriched::FlowMessage_DirectionType value);

  // uint32 Cid = 91;
  void clear_cid();
  static const int kCidFieldNumber = 91;
  ::google::protobuf::uint32 cid() const;
  void set_cid(::google::protobuf::uint32 value);

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 92;
  void clear_normalized();
  static const int kNormalizedFieldNumber = 92;
  ::flowmessageenriched::FlowMessage_NormalizedType normalized() const;
  void set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value);

  // uint32 SrcIfSpeed = 95;
  void clear_srcifspeed();
  static const int kSrcIfSpeedFieldNumber = 95;
  ::google::protobuf::uint32 srcifspeed() const;
  void set_srcifspeed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:flowmessageenriched.FlowMessage)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr srcip_;
  ::google::protobuf::internal::ArenaStringPtr dstip_;
  ::google::protobuf::internal::ArenaStringPtr routeraddr_;
  ::google::protobuf::internal::ArenaStringPtr nexthop_;
  ::google::protobuf::internal::ArenaStringPtr srcifname_;
  ::google::protobuf::internal::ArenaStringPtr srcifdesc_;
  ::google::protobuf::internal::ArenaStringPtr dstifname_;
  ::google::protobuf::internal::ArenaStringPtr dstifdesc_;
  ::google::protobuf::internal::ArenaStringPtr peer_;
  ::google::protobuf::internal::ArenaStringPtr remotecountry_;
  ::google::protobuf::internal::ArenaStringPtr protoname_;
  ::google::protobuf::uint64 timerecvd_;
  int type_;
  ::google::protobuf::uint32 sequencenum_;
  ::google::protobuf::uint64 samplingrate_;
  ::google::protobuf::uint64 timeflow_;
  ::google::protobuf::uint64 bytes_;
  ::google::protobuf::uint64 packets_;
  int ipversion_;
  ::google::protobuf::uint32 nexthopas_;
  ::google::protobuf::uint32 srcas_;
  ::google::protobuf::uint32 dstas_;
  ::google::protobuf::uint32 srcnet_;
  ::google::protobuf::uint32 dstnet_;
  ::google::protobuf::uint32 srcif_;
  ::google::protobuf::uint32 dstif_;
  ::google::protobuf::uint32 proto_;
  ::google::protobuf::uint32 srcport_;
  ::google::protobuf::uint32 dstport_;
  ::google::protobuf::uint32 iptos_;
  ::google::protobuf::uint32 forwardingstatus_;
  ::google::protobuf::uint32 ipttl_;
  ::google::protobuf::uint64 srcmac_;
  ::google::protobuf::uint32 tcpflags_;
  ::google::protobuf::uint32 vlanid_;
  ::google::protobuf::uint64 dstmac_;
  ::google::protobuf::uint32 etype_;
  ::google::protobuf::uint32 icmptype_;
  ::google::protobuf::uint32 icmpcode_;
  ::google::protobuf::uint32 srcvlan_;
  ::google::protobuf::uint32 dstvlan_;
  ::google::protobuf::uint32 fragmentid_;
  ::google::protobuf::uint32 fragmentoffset_;
  ::google::protobuf::uint32 ipv6flowlabel_;
  ::google::protobuf::uint32 ingressvrfid_;
  ::google::protobuf::uint32 egressvrfid_;
  ::google::protobuf::uint64 timeflowstart_;
  ::google::protobuf::uint64 timeflowend_;
  ::google::protobuf::uint32 dstifspeed_;
  int direction_;
  ::google::protobuf::uint32 cid_;
  int normalized_;
  ::google::protobuf::uint32 srcifspeed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_flow_2dmessages_2denriched_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FlowMessage

// .flowmessageenriched.FlowMessage.FlowType Type = 1;
inline void FlowMessage::clear_type() {
  type_ = 0;
}
inline ::flowmessageenriched::FlowMessage_FlowType FlowMessage::type() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Type)
  return static_cast< ::flowmessageenriched::FlowMessage_FlowType >(type_);
}
inline void FlowMessage::set_type(::flowmessageenriched::FlowMessage_FlowType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Type)
}

// uint64 TimeRecvd = 2;
inline void FlowMessage::clear_timerecvd() {
  timerecvd_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::timerecvd() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeRecvd)
  return timerecvd_;
}
inline void FlowMessage::set_timerecvd(::google::protobuf::uint64 value) {
  
  timerecvd_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeRecvd)
}

// uint64 SamplingRate = 3;
inline void FlowMessage::clear_samplingrate() {
  samplingrate_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::samplingrate() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SamplingRate)
  return samplingrate_;
}
inline void FlowMessage::set_samplingrate(::google::protobuf::uint64 value) {
  
  samplingrate_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SamplingRate)
}

// uint32 SequenceNum = 4;
inline void FlowMessage::clear_sequencenum() {
  sequencenum_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::sequencenum() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SequenceNum)
  return sequencenum_;
}
inline void FlowMessage::set_sequencenum(::google::protobuf::uint32 value) {
  
  sequencenum_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SequenceNum)
}

// uint64 TimeFlow = 5;
inline void FlowMessage::clear_timeflow() {
  timeflow_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::timeflow() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeFlow)
  return timeflow_;
}
inline void FlowMessage::set_timeflow(::google::protobuf::uint64 value) {
  
  timeflow_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeFlow)
}

// bytes SrcIP = 6;
inline void FlowMessage::clear_srcip() {
  srcip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::srcip() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIP)
  return srcip_.GetNoArena();
}
inline void FlowMessage::set_srcip(const ::std::string& value) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIP)
}
#if LANG_CXX11
inline void FlowMessage::set_srcip(::std::string&& value) {
  
  srcip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.SrcIP)
}
#endif
inline void FlowMessage::set_srcip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.SrcIP)
}
inline void FlowMessage::set_srcip(const void* value, size_t size) {
  
  srcip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.SrcIP)
}
inline ::std::string* FlowMessage::mutable_srcip() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcIP)
  return srcip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_srcip() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcIP)
  
  return srcip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_srcip(::std::string* srcip) {
  if (srcip != nullptr) {
    
  } else {
    
  }
  srcip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcip);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcIP)
}

// bytes DstIP = 7;
inline void FlowMessage::clear_dstip() {
  dstip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::dstip() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIP)
  return dstip_.GetNoArena();
}
inline void FlowMessage::set_dstip(const ::std::string& value) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIP)
}
#if LANG_CXX11
inline void FlowMessage::set_dstip(::std::string&& value) {
  
  dstip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.DstIP)
}
#endif
inline void FlowMessage::set_dstip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.DstIP)
}
inline void FlowMessage::set_dstip(const void* value, size_t size) {
  
  dstip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.DstIP)
}
inline ::std::string* FlowMessage::mutable_dstip() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstIP)
  return dstip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_dstip() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstIP)
  
  return dstip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_dstip(::std::string* dstip) {
  if (dstip != nullptr) {
    
  } else {
    
  }
  dstip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstip);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstIP)
}

// .flowmessageenriched.FlowMessage.IPType IPversion = 8;
inline void FlowMessage::clear_ipversion() {
  ipversion_ = 0;
}
inline ::flowmessageenriched::FlowMessage_IPType FlowMessage::ipversion() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPversion)
  return static_cast< ::flowmessageenriched::FlowMessage_IPType >(ipversion_);
}
inline void FlowMessage::set_ipversion(::flowmessageenriched::FlowMessage_IPType value) {
  
  ipversion_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPversion)
}

// uint64 Bytes = 9;
inline void FlowMessage::clear_bytes() {
  bytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::bytes() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Bytes)
  return bytes_;
}
inline void FlowMessage::set_bytes(::google::protobuf::uint64 value) {
  
  bytes_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Bytes)
}

// uint64 Packets = 10;
inline void FlowMessage::clear_packets() {
  packets_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::packets() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Packets)
  return packets_;
}
inline void FlowMessage::set_packets(::google::protobuf::uint64 value) {
  
  packets_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Packets)
}

// bytes RouterAddr = 11;
inline void FlowMessage::clear_routeraddr() {
  routeraddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::routeraddr() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.RouterAddr)
  return routeraddr_.GetNoArena();
}
inline void FlowMessage::set_routeraddr(const ::std::string& value) {
  
  routeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.RouterAddr)
}
#if LANG_CXX11
inline void FlowMessage::set_routeraddr(::std::string&& value) {
  
  routeraddr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.RouterAddr)
}
#endif
inline void FlowMessage::set_routeraddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  routeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.RouterAddr)
}
inline void FlowMessage::set_routeraddr(const void* value, size_t size) {
  
  routeraddr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.RouterAddr)
}
inline ::std::string* FlowMessage::mutable_routeraddr() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.RouterAddr)
  return routeraddr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_routeraddr() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.RouterAddr)
  
  return routeraddr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_routeraddr(::std::string* routeraddr) {
  if (routeraddr != nullptr) {
    
  } else {
    
  }
  routeraddr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), routeraddr);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.RouterAddr)
}

// bytes NextHop = 12;
inline void FlowMessage::clear_nexthop() {
  nexthop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::nexthop() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.NextHop)
  return nexthop_.GetNoArena();
}
inline void FlowMessage::set_nexthop(const ::std::string& value) {
  
  nexthop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.NextHop)
}
#if LANG_CXX11
inline void FlowMessage::set_nexthop(::std::string&& value) {
  
  nexthop_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.NextHop)
}
#endif
inline void FlowMessage::set_nexthop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nexthop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.NextHop)
}
inline void FlowMessage::set_nexthop(const void* value, size_t size) {
  
  nexthop_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.NextHop)
}
inline ::std::string* FlowMessage::mutable_nexthop() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.NextHop)
  return nexthop_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_nexthop() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.NextHop)
  
  return nexthop_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_nexthop(::std::string* nexthop) {
  if (nexthop != nullptr) {
    
  } else {
    
  }
  nexthop_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nexthop);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.NextHop)
}

// uint32 NextHopAS = 13;
inline void FlowMessage::clear_nexthopas() {
  nexthopas_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::nexthopas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.NextHopAS)
  return nexthopas_;
}
inline void FlowMessage::set_nexthopas(::google::protobuf::uint32 value) {
  
  nexthopas_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.NextHopAS)
}

// uint32 SrcAS = 14;
inline void FlowMessage::clear_srcas() {
  srcas_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcAS)
  return srcas_;
}
inline void FlowMessage::set_srcas(::google::protobuf::uint32 value) {
  
  srcas_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcAS)
}

// uint32 DstAS = 15;
inline void FlowMessage::clear_dstas() {
  dstas_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstas() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstAS)
  return dstas_;
}
inline void FlowMessage::set_dstas(::google::protobuf::uint32 value) {
  
  dstas_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstAS)
}

// uint32 SrcNet = 16;
inline void FlowMessage::clear_srcnet() {
  srcnet_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcnet() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcNet)
  return srcnet_;
}
inline void FlowMessage::set_srcnet(::google::protobuf::uint32 value) {
  
  srcnet_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcNet)
}

// uint32 DstNet = 17;
inline void FlowMessage::clear_dstnet() {
  dstnet_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstnet() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstNet)
  return dstnet_;
}
inline void FlowMessage::set_dstnet(::google::protobuf::uint32 value) {
  
  dstnet_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstNet)
}

// uint32 SrcIf = 18;
inline void FlowMessage::clear_srcif() {
  srcif_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcif() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIf)
  return srcif_;
}
inline void FlowMessage::set_srcif(::google::protobuf::uint32 value) {
  
  srcif_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIf)
}

// uint32 DstIf = 19;
inline void FlowMessage::clear_dstif() {
  dstif_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstif() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIf)
  return dstif_;
}
inline void FlowMessage::set_dstif(::google::protobuf::uint32 value) {
  
  dstif_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIf)
}

// uint32 Proto = 20;
inline void FlowMessage::clear_proto() {
  proto_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::proto() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Proto)
  return proto_;
}
inline void FlowMessage::set_proto(::google::protobuf::uint32 value) {
  
  proto_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Proto)
}

// uint32 SrcPort = 21;
inline void FlowMessage::clear_srcport() {
  srcport_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcport() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcPort)
  return srcport_;
}
inline void FlowMessage::set_srcport(::google::protobuf::uint32 value) {
  
  srcport_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcPort)
}

// uint32 DstPort = 22;
inline void FlowMessage::clear_dstport() {
  dstport_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstport() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstPort)
  return dstport_;
}
inline void FlowMessage::set_dstport(::google::protobuf::uint32 value) {
  
  dstport_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstPort)
}

// uint32 IPTos = 23;
inline void FlowMessage::clear_iptos() {
  iptos_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::iptos() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPTos)
  return iptos_;
}
inline void FlowMessage::set_iptos(::google::protobuf::uint32 value) {
  
  iptos_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPTos)
}

// uint32 ForwardingStatus = 24;
inline void FlowMessage::clear_forwardingstatus() {
  forwardingstatus_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::forwardingstatus() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.ForwardingStatus)
  return forwardingstatus_;
}
inline void FlowMessage::set_forwardingstatus(::google::protobuf::uint32 value) {
  
  forwardingstatus_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.ForwardingStatus)
}

// uint32 IPTTL = 25;
inline void FlowMessage::clear_ipttl() {
  ipttl_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::ipttl() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPTTL)
  return ipttl_;
}
inline void FlowMessage::set_ipttl(::google::protobuf::uint32 value) {
  
  ipttl_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPTTL)
}

// uint32 TCPFlags = 26;
inline void FlowMessage::clear_tcpflags() {
  tcpflags_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::tcpflags() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TCPFlags)
  return tcpflags_;
}
inline void FlowMessage::set_tcpflags(::google::protobuf::uint32 value) {
  
  tcpflags_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TCPFlags)
}

// uint64 SrcMac = 27;
inline void FlowMessage::clear_srcmac() {
  srcmac_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::srcmac() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcMac)
  return srcmac_;
}
inline void FlowMessage::set_srcmac(::google::protobuf::uint64 value) {
  
  srcmac_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcMac)
}

// uint64 DstMac = 28;
inline void FlowMessage::clear_dstmac() {
  dstmac_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::dstmac() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstMac)
  return dstmac_;
}
inline void FlowMessage::set_dstmac(::google::protobuf::uint64 value) {
  
  dstmac_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstMac)
}

// uint32 VlanId = 29;
inline void FlowMessage::clear_vlanid() {
  vlanid_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::vlanid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.VlanId)
  return vlanid_;
}
inline void FlowMessage::set_vlanid(::google::protobuf::uint32 value) {
  
  vlanid_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.VlanId)
}

// uint32 Etype = 30;
inline void FlowMessage::clear_etype() {
  etype_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::etype() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Etype)
  return etype_;
}
inline void FlowMessage::set_etype(::google::protobuf::uint32 value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Etype)
}

// uint32 IcmpType = 31;
inline void FlowMessage::clear_icmptype() {
  icmptype_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::icmptype() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IcmpType)
  return icmptype_;
}
inline void FlowMessage::set_icmptype(::google::protobuf::uint32 value) {
  
  icmptype_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IcmpType)
}

// uint32 IcmpCode = 32;
inline void FlowMessage::clear_icmpcode() {
  icmpcode_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::icmpcode() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IcmpCode)
  return icmpcode_;
}
inline void FlowMessage::set_icmpcode(::google::protobuf::uint32 value) {
  
  icmpcode_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IcmpCode)
}

// uint32 SrcVlan = 33;
inline void FlowMessage::clear_srcvlan() {
  srcvlan_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcvlan() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcVlan)
  return srcvlan_;
}
inline void FlowMessage::set_srcvlan(::google::protobuf::uint32 value) {
  
  srcvlan_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcVlan)
}

// uint32 DstVlan = 34;
inline void FlowMessage::clear_dstvlan() {
  dstvlan_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstvlan() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstVlan)
  return dstvlan_;
}
inline void FlowMessage::set_dstvlan(::google::protobuf::uint32 value) {
  
  dstvlan_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstVlan)
}

// uint32 FragmentId = 35;
inline void FlowMessage::clear_fragmentid() {
  fragmentid_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::fragmentid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.FragmentId)
  return fragmentid_;
}
inline void FlowMessage::set_fragmentid(::google::protobuf::uint32 value) {
  
  fragmentid_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.FragmentId)
}

// uint32 FragmentOffset = 36;
inline void FlowMessage::clear_fragmentoffset() {
  fragmentoffset_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::fragmentoffset() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.FragmentOffset)
  return fragmentoffset_;
}
inline void FlowMessage::set_fragmentoffset(::google::protobuf::uint32 value) {
  
  fragmentoffset_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.FragmentOffset)
}

// uint32 IPv6FlowLabel = 37;
inline void FlowMessage::clear_ipv6flowlabel() {
  ipv6flowlabel_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::ipv6flowlabel() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IPv6FlowLabel)
  return ipv6flowlabel_;
}
inline void FlowMessage::set_ipv6flowlabel(::google::protobuf::uint32 value) {
  
  ipv6flowlabel_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IPv6FlowLabel)
}

// uint32 IngressVrfId = 38;
inline void FlowMessage::clear_ingressvrfid() {
  ingressvrfid_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::ingressvrfid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.IngressVrfId)
  return ingressvrfid_;
}
inline void FlowMessage::set_ingressvrfid(::google::protobuf::uint32 value) {
  
  ingressvrfid_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.IngressVrfId)
}

// uint32 EgressVrfId = 39;
inline void FlowMessage::clear_egressvrfid() {
  egressvrfid_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::egressvrfid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.EgressVrfId)
  return egressvrfid_;
}
inline void FlowMessage::set_egressvrfid(::google::protobuf::uint32 value) {
  
  egressvrfid_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.EgressVrfId)
}

// uint64 TimeFlowStart = 40;
inline void FlowMessage::clear_timeflowstart() {
  timeflowstart_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::timeflowstart() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeFlowStart)
  return timeflowstart_;
}
inline void FlowMessage::set_timeflowstart(::google::protobuf::uint64 value) {
  
  timeflowstart_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeFlowStart)
}

// uint64 TimeFlowEnd = 41;
inline void FlowMessage::clear_timeflowend() {
  timeflowend_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FlowMessage::timeflowend() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.TimeFlowEnd)
  return timeflowend_;
}
inline void FlowMessage::set_timeflowend(::google::protobuf::uint64 value) {
  
  timeflowend_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.TimeFlowEnd)
}

// .flowmessageenriched.FlowMessage.DirectionType Direction = 90;
inline void FlowMessage::clear_direction() {
  direction_ = 0;
}
inline ::flowmessageenriched::FlowMessage_DirectionType FlowMessage::direction() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Direction)
  return static_cast< ::flowmessageenriched::FlowMessage_DirectionType >(direction_);
}
inline void FlowMessage::set_direction(::flowmessageenriched::FlowMessage_DirectionType value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Direction)
}

// uint32 Cid = 91;
inline void FlowMessage::clear_cid() {
  cid_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::cid() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Cid)
  return cid_;
}
inline void FlowMessage::set_cid(::google::protobuf::uint32 value) {
  
  cid_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Cid)
}

// .flowmessageenriched.FlowMessage.NormalizedType Normalized = 92;
inline void FlowMessage::clear_normalized() {
  normalized_ = 0;
}
inline ::flowmessageenriched::FlowMessage_NormalizedType FlowMessage::normalized() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Normalized)
  return static_cast< ::flowmessageenriched::FlowMessage_NormalizedType >(normalized_);
}
inline void FlowMessage::set_normalized(::flowmessageenriched::FlowMessage_NormalizedType value) {
  
  normalized_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Normalized)
}

// string SrcIfName = 93;
inline void FlowMessage::clear_srcifname() {
  srcifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::srcifname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfName)
  return srcifname_.GetNoArena();
}
inline void FlowMessage::set_srcifname(const ::std::string& value) {
  
  srcifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfName)
}
#if LANG_CXX11
inline void FlowMessage::set_srcifname(::std::string&& value) {
  
  srcifname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.SrcIfName)
}
#endif
inline void FlowMessage::set_srcifname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.SrcIfName)
}
inline void FlowMessage::set_srcifname(const char* value, size_t size) {
  
  srcifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.SrcIfName)
}
inline ::std::string* FlowMessage::mutable_srcifname() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcIfName)
  return srcifname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_srcifname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcIfName)
  
  return srcifname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_srcifname(::std::string* srcifname) {
  if (srcifname != nullptr) {
    
  } else {
    
  }
  srcifname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcifname);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcIfName)
}

// string SrcIfDesc = 94;
inline void FlowMessage::clear_srcifdesc() {
  srcifdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::srcifdesc() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfDesc)
  return srcifdesc_.GetNoArena();
}
inline void FlowMessage::set_srcifdesc(const ::std::string& value) {
  
  srcifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfDesc)
}
#if LANG_CXX11
inline void FlowMessage::set_srcifdesc(::std::string&& value) {
  
  srcifdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.SrcIfDesc)
}
#endif
inline void FlowMessage::set_srcifdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  srcifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.SrcIfDesc)
}
inline void FlowMessage::set_srcifdesc(const char* value, size_t size) {
  
  srcifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.SrcIfDesc)
}
inline ::std::string* FlowMessage::mutable_srcifdesc() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.SrcIfDesc)
  return srcifdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_srcifdesc() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.SrcIfDesc)
  
  return srcifdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_srcifdesc(::std::string* srcifdesc) {
  if (srcifdesc != nullptr) {
    
  } else {
    
  }
  srcifdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcifdesc);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.SrcIfDesc)
}

// uint32 SrcIfSpeed = 95;
inline void FlowMessage::clear_srcifspeed() {
  srcifspeed_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::srcifspeed() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.SrcIfSpeed)
  return srcifspeed_;
}
inline void FlowMessage::set_srcifspeed(::google::protobuf::uint32 value) {
  
  srcifspeed_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.SrcIfSpeed)
}

// string DstIfName = 96;
inline void FlowMessage::clear_dstifname() {
  dstifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::dstifname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfName)
  return dstifname_.GetNoArena();
}
inline void FlowMessage::set_dstifname(const ::std::string& value) {
  
  dstifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfName)
}
#if LANG_CXX11
inline void FlowMessage::set_dstifname(::std::string&& value) {
  
  dstifname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.DstIfName)
}
#endif
inline void FlowMessage::set_dstifname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.DstIfName)
}
inline void FlowMessage::set_dstifname(const char* value, size_t size) {
  
  dstifname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.DstIfName)
}
inline ::std::string* FlowMessage::mutable_dstifname() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstIfName)
  return dstifname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_dstifname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstIfName)
  
  return dstifname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_dstifname(::std::string* dstifname) {
  if (dstifname != nullptr) {
    
  } else {
    
  }
  dstifname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstifname);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstIfName)
}

// string DstIfDesc = 97;
inline void FlowMessage::clear_dstifdesc() {
  dstifdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::dstifdesc() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfDesc)
  return dstifdesc_.GetNoArena();
}
inline void FlowMessage::set_dstifdesc(const ::std::string& value) {
  
  dstifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfDesc)
}
#if LANG_CXX11
inline void FlowMessage::set_dstifdesc(::std::string&& value) {
  
  dstifdesc_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.DstIfDesc)
}
#endif
inline void FlowMessage::set_dstifdesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dstifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.DstIfDesc)
}
inline void FlowMessage::set_dstifdesc(const char* value, size_t size) {
  
  dstifdesc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.DstIfDesc)
}
inline ::std::string* FlowMessage::mutable_dstifdesc() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.DstIfDesc)
  return dstifdesc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_dstifdesc() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.DstIfDesc)
  
  return dstifdesc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_dstifdesc(::std::string* dstifdesc) {
  if (dstifdesc != nullptr) {
    
  } else {
    
  }
  dstifdesc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dstifdesc);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.DstIfDesc)
}

// uint32 DstIfSpeed = 98;
inline void FlowMessage::clear_dstifspeed() {
  dstifspeed_ = 0u;
}
inline ::google::protobuf::uint32 FlowMessage::dstifspeed() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.DstIfSpeed)
  return dstifspeed_;
}
inline void FlowMessage::set_dstifspeed(::google::protobuf::uint32 value) {
  
  dstifspeed_ = value;
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.DstIfSpeed)
}

// string Peer = 99;
inline void FlowMessage::clear_peer() {
  peer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::peer() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.Peer)
  return peer_.GetNoArena();
}
inline void FlowMessage::set_peer(const ::std::string& value) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.Peer)
}
#if LANG_CXX11
inline void FlowMessage::set_peer(::std::string&& value) {
  
  peer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.Peer)
}
#endif
inline void FlowMessage::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.Peer)
}
inline void FlowMessage::set_peer(const char* value, size_t size) {
  
  peer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.Peer)
}
inline ::std::string* FlowMessage::mutable_peer() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.Peer)
  return peer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_peer() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.Peer)
  
  return peer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_peer(::std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.Peer)
}

// string RemoteCountry = 100;
inline void FlowMessage::clear_remotecountry() {
  remotecountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::remotecountry() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.RemoteCountry)
  return remotecountry_.GetNoArena();
}
inline void FlowMessage::set_remotecountry(const ::std::string& value) {
  
  remotecountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.RemoteCountry)
}
#if LANG_CXX11
inline void FlowMessage::set_remotecountry(::std::string&& value) {
  
  remotecountry_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.RemoteCountry)
}
#endif
inline void FlowMessage::set_remotecountry(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotecountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.RemoteCountry)
}
inline void FlowMessage::set_remotecountry(const char* value, size_t size) {
  
  remotecountry_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.RemoteCountry)
}
inline ::std::string* FlowMessage::mutable_remotecountry() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.RemoteCountry)
  return remotecountry_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_remotecountry() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.RemoteCountry)
  
  return remotecountry_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_remotecountry(::std::string* remotecountry) {
  if (remotecountry != nullptr) {
    
  } else {
    
  }
  remotecountry_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), remotecountry);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.RemoteCountry)
}

// string ProtoName = 101;
inline void FlowMessage::clear_protoname() {
  protoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FlowMessage::protoname() const {
  // @@protoc_insertion_point(field_get:flowmessageenriched.FlowMessage.ProtoName)
  return protoname_.GetNoArena();
}
inline void FlowMessage::set_protoname(const ::std::string& value) {
  
  protoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:flowmessageenriched.FlowMessage.ProtoName)
}
#if LANG_CXX11
inline void FlowMessage::set_protoname(::std::string&& value) {
  
  protoname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:flowmessageenriched.FlowMessage.ProtoName)
}
#endif
inline void FlowMessage::set_protoname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:flowmessageenriched.FlowMessage.ProtoName)
}
inline void FlowMessage::set_protoname(const char* value, size_t size) {
  
  protoname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:flowmessageenriched.FlowMessage.ProtoName)
}
inline ::std::string* FlowMessage::mutable_protoname() {
  
  // @@protoc_insertion_point(field_mutable:flowmessageenriched.FlowMessage.ProtoName)
  return protoname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlowMessage::release_protoname() {
  // @@protoc_insertion_point(field_release:flowmessageenriched.FlowMessage.ProtoName)
  
  return protoname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlowMessage::set_allocated_protoname(::std::string* protoname) {
  if (protoname != nullptr) {
    
  } else {
    
  }
  protoname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protoname);
  // @@protoc_insertion_point(field_set_allocated:flowmessageenriched.FlowMessage.ProtoName)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace flowmessageenriched

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_FlowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_FlowType>() {
  return ::flowmessageenriched::FlowMessage_FlowType_descriptor();
}
template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_IPType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_IPType>() {
  return ::flowmessageenriched::FlowMessage_IPType_descriptor();
}
template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_DirectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_DirectionType>() {
  return ::flowmessageenriched::FlowMessage_DirectionType_descriptor();
}
template <> struct is_proto_enum< ::flowmessageenriched::FlowMessage_NormalizedType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::flowmessageenriched::FlowMessage_NormalizedType>() {
  return ::flowmessageenriched::FlowMessage_NormalizedType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_flow_2dmessages_2denriched_2eproto
