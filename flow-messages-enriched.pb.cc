// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flow-messages-enriched.proto

#include "flow-messages-enriched.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace flowmessageenriched {
class FlowMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FlowMessage> _instance;
} _FlowMessage_default_instance_;
}  // namespace flowmessageenriched
static void InitDefaultsFlowMessage_flow_2dmessages_2denriched_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::flowmessageenriched::_FlowMessage_default_instance_;
    new (ptr) ::flowmessageenriched::FlowMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::flowmessageenriched::FlowMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFlowMessage_flow_2dmessages_2denriched_2eproto}, {}};

void InitDefaults_flow_2dmessages_2denriched_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_flow_2dmessages_2denriched_2eproto[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_flow_2dmessages_2denriched_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_flow_2dmessages_2denriched_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, type_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timereceived_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, sequencenum_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, samplingrate_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, flowdirection_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, sampleraddress_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timeflowstart_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, timeflowend_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, bytes_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, packets_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcaddr_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstaddr_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, etype_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, proto_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcport_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstport_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcif_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstif_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcmac_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstmac_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcvlan_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstvlan_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, vlanid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ingressvrfid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, egressvrfid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, iptos_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, forwardingstatus_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipttl_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, tcpflags_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, icmptype_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, icmpcode_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipv6flowlabel_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, ipv6extensionheaders_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, fragmentoffset_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, biflowdirection_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, nexthop_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, nexthopas_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcnet_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstnet_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, cid_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, cidstring_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, normalized_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifdesc_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, srcifspeed_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifdesc_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, dstifspeed_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, protoname_),
  PROTOBUF_FIELD_OFFSET(::flowmessageenriched::FlowMessage, remotecountry_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::flowmessageenriched::FlowMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::flowmessageenriched::_FlowMessage_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_flow_2dmessages_2denriched_2eproto = {
  {}, AddDescriptors_flow_2dmessages_2denriched_2eproto, "flow-messages-enriched.proto", schemas,
  file_default_instances, TableStruct_flow_2dmessages_2denriched_2eproto::offsets,
  file_level_metadata_flow_2dmessages_2denriched_2eproto, 1, file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto, file_level_service_descriptors_flow_2dmessages_2denriched_2eproto,
};

const char descriptor_table_protodef_flow_2dmessages_2denriched_2eproto[] =
  "\n\034flow-messages-enriched.proto\022\023flowmess"
  "ageenriched\"\317\t\n\013FlowMessage\0227\n\004Type\030\001 \001("
  "\0162).flowmessageenriched.FlowMessage.Flow"
  "Type\022\024\n\014TimeReceived\030\002 \001(\004\022\023\n\013SequenceNu"
  "m\030\004 \001(\r\022\024\n\014SamplingRate\030\003 \001(\004\022\025\n\rFlowDir"
  "ection\030* \001(\r\022\026\n\016SamplerAddress\030\013 \001(\014\022\025\n\r"
  "TimeFlowStart\030& \001(\004\022\023\n\013TimeFlowEnd\030\005 \001(\004"
  "\022\r\n\005Bytes\030\t \001(\004\022\017\n\007Packets\030\n \001(\004\022\017\n\007SrcA"
  "ddr\030\006 \001(\014\022\017\n\007DstAddr\030\007 \001(\014\022\r\n\005Etype\030\036 \001("
  "\r\022\r\n\005Proto\030\024 \001(\r\022\017\n\007SrcPort\030\025 \001(\r\022\017\n\007Dst"
  "Port\030\026 \001(\r\022\r\n\005SrcIf\030\022 \001(\r\022\r\n\005DstIf\030\023 \001(\r"
  "\022\016\n\006SrcMac\030\033 \001(\004\022\016\n\006DstMac\030\034 \001(\004\022\017\n\007SrcV"
  "lan\030! \001(\r\022\017\n\007DstVlan\030\" \001(\r\022\016\n\006VlanId\030\035 \001"
  "(\r\022\024\n\014IngressVrfID\030\' \001(\r\022\023\n\013EgressVrfID\030"
  "( \001(\r\022\r\n\005IPTos\030\027 \001(\r\022\030\n\020ForwardingStatus"
  "\030\030 \001(\r\022\r\n\005IPTTL\030\031 \001(\r\022\020\n\010TCPFlags\030\032 \001(\r\022"
  "\020\n\010IcmpType\030\037 \001(\r\022\020\n\010IcmpCode\030  \001(\r\022\025\n\rI"
  "Pv6FlowLabel\030% \001(\r\022\034\n\024IPv6ExtensionHeade"
  "rs\030+ \001(\r\022\022\n\nFragmentId\030# \001(\r\022\026\n\016Fragment"
  "Offset\030$ \001(\r\022\027\n\017BiFlowDirection\030) \001(\r\022\r\n"
  "\005SrcAS\030\016 \001(\r\022\r\n\005DstAS\030\017 \001(\r\022\017\n\007NextHop\030\014"
  " \001(\014\022\021\n\tNextHopAS\030\r \001(\r\022\016\n\006SrcNet\030\020 \001(\r\022"
  "\016\n\006DstNet\030\021 \001(\r\022\014\n\003Cid\030\350\007 \001(\r\022\022\n\tCidStri"
  "ng\030\351\007 \001(\t\022D\n\nNormalized\030\352\007 \001(\0162/.flowmes"
  "sageenriched.FlowMessage.NormalizedType\022"
  "\022\n\tSrcIfName\030\353\007 \001(\t\022\022\n\tSrcIfDesc\030\354\007 \001(\t\022"
  "\023\n\nSrcIfSpeed\030\355\007 \001(\r\022\022\n\tDstIfName\030\356\007 \001(\t"
  "\022\022\n\tDstIfDesc\030\357\007 \001(\t\022\023\n\nDstIfSpeed\030\360\007 \001("
  "\r\022\022\n\tProtoName\030\361\007 \001(\t\022\026\n\rRemoteCountry\030\362"
  "\007 \001(\t\"S\n\010FlowType\022\017\n\013FLOWUNKNOWN\020\000\022\013\n\007SF"
  "LOW_5\020\001\022\016\n\nNETFLOW_V5\020\002\022\016\n\nNETFLOW_V9\020\003\022"
  "\t\n\005IPFIX\020\004\"!\n\016NormalizedType\022\006\n\002No\020\000\022\007\n\003"
  "Yes\020\001B\"\n\tbwnetflowB\025FlowMessageEnrichedP"
  "bb\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_flow_2dmessages_2denriched_2eproto = {
  false, InitDefaults_flow_2dmessages_2denriched_2eproto, 
  descriptor_table_protodef_flow_2dmessages_2denriched_2eproto,
  "flow-messages-enriched.proto", &assign_descriptors_table_flow_2dmessages_2denriched_2eproto, 1329,
};

void AddDescriptors_flow_2dmessages_2denriched_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_flow_2dmessages_2denriched_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flow_2dmessages_2denriched_2eproto = []() { AddDescriptors_flow_2dmessages_2denriched_2eproto(); return true; }();
namespace flowmessageenriched {
const ::google::protobuf::EnumDescriptor* FlowMessage_FlowType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flow_2dmessages_2denriched_2eproto);
  return file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[0];
}
bool FlowMessage_FlowType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlowMessage_FlowType FlowMessage::FLOWUNKNOWN;
const FlowMessage_FlowType FlowMessage::SFLOW_5;
const FlowMessage_FlowType FlowMessage::NETFLOW_V5;
const FlowMessage_FlowType FlowMessage::NETFLOW_V9;
const FlowMessage_FlowType FlowMessage::IPFIX;
const FlowMessage_FlowType FlowMessage::FlowType_MIN;
const FlowMessage_FlowType FlowMessage::FlowType_MAX;
const int FlowMessage::FlowType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FlowMessage_NormalizedType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_flow_2dmessages_2denriched_2eproto);
  return file_level_enum_descriptors_flow_2dmessages_2denriched_2eproto[1];
}
bool FlowMessage_NormalizedType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FlowMessage_NormalizedType FlowMessage::No;
const FlowMessage_NormalizedType FlowMessage::Yes;
const FlowMessage_NormalizedType FlowMessage::NormalizedType_MIN;
const FlowMessage_NormalizedType FlowMessage::NormalizedType_MAX;
const int FlowMessage::NormalizedType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void FlowMessage::InitAsDefaultInstance() {
}
class FlowMessage::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FlowMessage::kTypeFieldNumber;
const int FlowMessage::kTimeReceivedFieldNumber;
const int FlowMessage::kSequenceNumFieldNumber;
const int FlowMessage::kSamplingRateFieldNumber;
const int FlowMessage::kFlowDirectionFieldNumber;
const int FlowMessage::kSamplerAddressFieldNumber;
const int FlowMessage::kTimeFlowStartFieldNumber;
const int FlowMessage::kTimeFlowEndFieldNumber;
const int FlowMessage::kBytesFieldNumber;
const int FlowMessage::kPacketsFieldNumber;
const int FlowMessage::kSrcAddrFieldNumber;
const int FlowMessage::kDstAddrFieldNumber;
const int FlowMessage::kEtypeFieldNumber;
const int FlowMessage::kProtoFieldNumber;
const int FlowMessage::kSrcPortFieldNumber;
const int FlowMessage::kDstPortFieldNumber;
const int FlowMessage::kSrcIfFieldNumber;
const int FlowMessage::kDstIfFieldNumber;
const int FlowMessage::kSrcMacFieldNumber;
const int FlowMessage::kDstMacFieldNumber;
const int FlowMessage::kSrcVlanFieldNumber;
const int FlowMessage::kDstVlanFieldNumber;
const int FlowMessage::kVlanIdFieldNumber;
const int FlowMessage::kIngressVrfIDFieldNumber;
const int FlowMessage::kEgressVrfIDFieldNumber;
const int FlowMessage::kIPTosFieldNumber;
const int FlowMessage::kForwardingStatusFieldNumber;
const int FlowMessage::kIPTTLFieldNumber;
const int FlowMessage::kTCPFlagsFieldNumber;
const int FlowMessage::kIcmpTypeFieldNumber;
const int FlowMessage::kIcmpCodeFieldNumber;
const int FlowMessage::kIPv6FlowLabelFieldNumber;
const int FlowMessage::kIPv6ExtensionHeadersFieldNumber;
const int FlowMessage::kFragmentIdFieldNumber;
const int FlowMessage::kFragmentOffsetFieldNumber;
const int FlowMessage::kBiFlowDirectionFieldNumber;
const int FlowMessage::kSrcASFieldNumber;
const int FlowMessage::kDstASFieldNumber;
const int FlowMessage::kNextHopFieldNumber;
const int FlowMessage::kNextHopASFieldNumber;
const int FlowMessage::kSrcNetFieldNumber;
const int FlowMessage::kDstNetFieldNumber;
const int FlowMessage::kCidFieldNumber;
const int FlowMessage::kCidStringFieldNumber;
const int FlowMessage::kNormalizedFieldNumber;
const int FlowMessage::kSrcIfNameFieldNumber;
const int FlowMessage::kSrcIfDescFieldNumber;
const int FlowMessage::kSrcIfSpeedFieldNumber;
const int FlowMessage::kDstIfNameFieldNumber;
const int FlowMessage::kDstIfDescFieldNumber;
const int FlowMessage::kDstIfSpeedFieldNumber;
const int FlowMessage::kProtoNameFieldNumber;
const int FlowMessage::kRemoteCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FlowMessage::FlowMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:flowmessageenriched.FlowMessage)
}
FlowMessage::FlowMessage(const FlowMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  srcaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srcaddr().size() > 0) {
    srcaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcaddr_);
  }
  dstaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dstaddr().size() > 0) {
    dstaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstaddr_);
  }
  sampleraddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sampleraddress().size() > 0) {
    sampleraddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sampleraddress_);
  }
  nexthop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nexthop().size() > 0) {
    nexthop_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexthop_);
  }
  cidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.cidstring().size() > 0) {
    cidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cidstring_);
  }
  srcifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srcifname().size() > 0) {
    srcifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcifname_);
  }
  srcifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.srcifdesc().size() > 0) {
    srcifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcifdesc_);
  }
  dstifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dstifname().size() > 0) {
    dstifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstifname_);
  }
  dstifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dstifdesc().size() > 0) {
    dstifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstifdesc_);
  }
  protoname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protoname().size() > 0) {
    protoname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protoname_);
  }
  remotecountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remotecountry().size() > 0) {
    remotecountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotecountry_);
  }
  ::memcpy(&timereceived_, &from.timereceived_,
    static_cast<size_t>(reinterpret_cast<char*>(&dstifspeed_) -
    reinterpret_cast<char*>(&timereceived_)) + sizeof(dstifspeed_));
  // @@protoc_insertion_point(copy_constructor:flowmessageenriched.FlowMessage)
}

void FlowMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base);
  srcaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstaddr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sampleraddress_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexthop_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidstring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifdesc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protoname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotecountry_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timereceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstifspeed_) -
      reinterpret_cast<char*>(&timereceived_)) + sizeof(dstifspeed_));
}

FlowMessage::~FlowMessage() {
  // @@protoc_insertion_point(destructor:flowmessageenriched.FlowMessage)
  SharedDtor();
}

void FlowMessage::SharedDtor() {
  srcaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstaddr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sampleraddress_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexthop_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifdesc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protoname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotecountry_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FlowMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowMessage& FlowMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FlowMessage_flow_2dmessages_2denriched_2eproto.base);
  return *internal_default_instance();
}


void FlowMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:flowmessageenriched.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  srcaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstaddr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sampleraddress_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nexthop_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cidstring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srcifdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dstifdesc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protoname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remotecountry_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timereceived_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dstifspeed_) -
      reinterpret_cast<char*>(&timereceived_)) + sizeof(dstifspeed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FlowMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FlowMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // .flowmessageenriched.FlowMessage.FlowType Type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_type(static_cast<::flowmessageenriched::FlowMessage_FlowType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 TimeReceived = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timereceived(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 SamplingRate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_samplingrate(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SequenceNum = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_sequencenum(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 TimeFlowEnd = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timeflowend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes SrcAddr = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_srcaddr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes DstAddr = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_dstaddr();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint64 Bytes = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_bytes(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 Packets = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_packets(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // bytes SamplerAddress = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_sampleraddress();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // bytes NextHop = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_nexthop();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 NextHopAS = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_nexthopas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcAS = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_srcas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstAS = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_dstas(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcNet = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_srcnet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstNet = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_dstnet(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcIf = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_srcif(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstIf = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_dstif(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Proto = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_proto(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcPort = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_srcport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstPort = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_dstport(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IPTos = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_iptos(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 ForwardingStatus = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_forwardingstatus(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IPTTL = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_ipttl(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 TCPFlags = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_tcpflags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 SrcMac = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_srcmac(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 DstMac = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_dstmac(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 VlanId = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_vlanid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Etype = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_etype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IcmpType = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_icmptype(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IcmpCode = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 0) goto handle_unusual;
        msg->set_icmpcode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 SrcVlan = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_srcvlan(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 DstVlan = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_dstvlan(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 FragmentId = 35;
      case 35: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_fragmentid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 FragmentOffset = 36;
      case 36: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_fragmentoffset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IPv6FlowLabel = 37;
      case 37: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_ipv6flowlabel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint64 TimeFlowStart = 38;
      case 38: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_timeflowstart(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IngressVrfID = 39;
      case 39: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_ingressvrfid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 EgressVrfID = 40;
      case 40: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_egressvrfid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 BiFlowDirection = 41;
      case 41: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_biflowdirection(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 FlowDirection = 42;
      case 42: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_flowdirection(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 IPv6ExtensionHeaders = 43;
      case 43: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_ipv6extensionheaders(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // uint32 Cid = 1000;
      case 1000: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_cid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string CidString = 1001;
      case 1001: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.CidString");
        object = msg->mutable_cidstring();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
      case 1002: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        msg->set_normalized(static_cast<::flowmessageenriched::FlowMessage_NormalizedType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string SrcIfName = 1003;
      case 1003: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.SrcIfName");
        object = msg->mutable_srcifname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string SrcIfDesc = 1004;
      case 1004: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.SrcIfDesc");
        object = msg->mutable_srcifdesc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 SrcIfSpeed = 1005;
      case 1005: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_srcifspeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string DstIfName = 1006;
      case 1006: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.DstIfName");
        object = msg->mutable_dstifname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string DstIfDesc = 1007;
      case 1007: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.DstIfDesc");
        object = msg->mutable_dstifdesc();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // uint32 DstIfSpeed = 1008;
      case 1008: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_dstifspeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string ProtoName = 1009;
      case 1009: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.ProtoName");
        object = msg->mutable_protoname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // string RemoteCountry = 1010;
      case 1010: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("flowmessageenriched.FlowMessage.RemoteCountry");
        object = msg->mutable_remotecountry();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FlowMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:flowmessageenriched.FlowMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .flowmessageenriched.FlowMessage.FlowType Type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::flowmessageenriched::FlowMessage_FlowType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TimeReceived = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timereceived_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 SamplingRate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &samplingrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SequenceNum = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequencenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TimeFlowEnd = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeflowend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes SrcAddr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_srcaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes DstAddr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dstaddr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Bytes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 Packets = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &packets_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes SamplerAddress = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sampleraddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes NextHop = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nexthop()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 NextHopAS = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexthopas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcAS = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstAS = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstas_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcNet = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcnet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstNet = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstnet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcIf = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcif_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstIf = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstif_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Proto = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proto_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcPort = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstPort = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IPTos = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iptos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ForwardingStatus = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &forwardingstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IPTTL = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 TCPFlags = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcpflags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 SrcMac = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &srcmac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 DstMac = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dstmac_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 VlanId = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vlanid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Etype = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &etype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IcmpType = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icmptype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IcmpCode = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (256 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icmpcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcVlan = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcvlan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstVlan = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstvlan_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FragmentId = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (280 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FragmentOffset = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (288 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentoffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IPv6FlowLabel = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (296 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv6flowlabel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 TimeFlowStart = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (304 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timeflowstart_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IngressVrfID = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (312 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ingressvrfid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 EgressVrfID = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (320 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &egressvrfid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 BiFlowDirection = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (328 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &biflowdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 FlowDirection = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (336 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flowdirection_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 IPv6ExtensionHeaders = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (344 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ipv6extensionheaders_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Cid = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8000 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string CidString = 1001;
      case 1001: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8010 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cidstring()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cidstring().data(), static_cast<int>(this->cidstring().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.CidString"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
      case 1002: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8016 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_normalized(static_cast< ::flowmessageenriched::FlowMessage_NormalizedType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SrcIfName = 1003;
      case 1003: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8026 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcifname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srcifname().data(), static_cast<int>(this->srcifname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.SrcIfName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string SrcIfDesc = 1004;
      case 1004: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8034 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcifdesc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srcifdesc().data(), static_cast<int>(this->srcifdesc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.SrcIfDesc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SrcIfSpeed = 1005;
      case 1005: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8040 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcifspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DstIfName = 1006;
      case 1006: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8050 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstifname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dstifname().data(), static_cast<int>(this->dstifname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.DstIfName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string DstIfDesc = 1007;
      case 1007: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8058 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dstifdesc()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dstifdesc().data(), static_cast<int>(this->dstifdesc().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.DstIfDesc"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 DstIfSpeed = 1008;
      case 1008: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8064 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstifspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ProtoName = 1009;
      case 1009: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8074 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protoname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protoname().data(), static_cast<int>(this->protoname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.ProtoName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string RemoteCountry = 1010;
      case 1010: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8082 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remotecountry()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remotecountry().data(), static_cast<int>(this->remotecountry().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "flowmessageenriched.FlowMessage.RemoteCountry"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:flowmessageenriched.FlowMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:flowmessageenriched.FlowMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FlowMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:flowmessageenriched.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint64 TimeReceived = 2;
  if (this->timereceived() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timereceived(), output);
  }

  // uint64 SamplingRate = 3;
  if (this->samplingrate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->samplingrate(), output);
  }

  // uint32 SequenceNum = 4;
  if (this->sequencenum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sequencenum(), output);
  }

  // uint64 TimeFlowEnd = 5;
  if (this->timeflowend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timeflowend(), output);
  }

  // bytes SrcAddr = 6;
  if (this->srcaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->srcaddr(), output);
  }

  // bytes DstAddr = 7;
  if (this->dstaddr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->dstaddr(), output);
  }

  // uint64 Bytes = 9;
  if (this->bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->bytes(), output);
  }

  // uint64 Packets = 10;
  if (this->packets() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->packets(), output);
  }

  // bytes SamplerAddress = 11;
  if (this->sampleraddress().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->sampleraddress(), output);
  }

  // bytes NextHop = 12;
  if (this->nexthop().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->nexthop(), output);
  }

  // uint32 NextHopAS = 13;
  if (this->nexthopas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->nexthopas(), output);
  }

  // uint32 SrcAS = 14;
  if (this->srcas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->srcas(), output);
  }

  // uint32 DstAS = 15;
  if (this->dstas() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dstas(), output);
  }

  // uint32 SrcNet = 16;
  if (this->srcnet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->srcnet(), output);
  }

  // uint32 DstNet = 17;
  if (this->dstnet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dstnet(), output);
  }

  // uint32 SrcIf = 18;
  if (this->srcif() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->srcif(), output);
  }

  // uint32 DstIf = 19;
  if (this->dstif() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->dstif(), output);
  }

  // uint32 Proto = 20;
  if (this->proto() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->proto(), output);
  }

  // uint32 SrcPort = 21;
  if (this->srcport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->srcport(), output);
  }

  // uint32 DstPort = 22;
  if (this->dstport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->dstport(), output);
  }

  // uint32 IPTos = 23;
  if (this->iptos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->iptos(), output);
  }

  // uint32 ForwardingStatus = 24;
  if (this->forwardingstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->forwardingstatus(), output);
  }

  // uint32 IPTTL = 25;
  if (this->ipttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->ipttl(), output);
  }

  // uint32 TCPFlags = 26;
  if (this->tcpflags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->tcpflags(), output);
  }

  // uint64 SrcMac = 27;
  if (this->srcmac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->srcmac(), output);
  }

  // uint64 DstMac = 28;
  if (this->dstmac() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(28, this->dstmac(), output);
  }

  // uint32 VlanId = 29;
  if (this->vlanid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->vlanid(), output);
  }

  // uint32 Etype = 30;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->etype(), output);
  }

  // uint32 IcmpType = 31;
  if (this->icmptype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->icmptype(), output);
  }

  // uint32 IcmpCode = 32;
  if (this->icmpcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->icmpcode(), output);
  }

  // uint32 SrcVlan = 33;
  if (this->srcvlan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->srcvlan(), output);
  }

  // uint32 DstVlan = 34;
  if (this->dstvlan() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->dstvlan(), output);
  }

  // uint32 FragmentId = 35;
  if (this->fragmentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->fragmentid(), output);
  }

  // uint32 FragmentOffset = 36;
  if (this->fragmentoffset() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->fragmentoffset(), output);
  }

  // uint32 IPv6FlowLabel = 37;
  if (this->ipv6flowlabel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->ipv6flowlabel(), output);
  }

  // uint64 TimeFlowStart = 38;
  if (this->timeflowstart() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(38, this->timeflowstart(), output);
  }

  // uint32 IngressVrfID = 39;
  if (this->ingressvrfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->ingressvrfid(), output);
  }

  // uint32 EgressVrfID = 40;
  if (this->egressvrfid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->egressvrfid(), output);
  }

  // uint32 BiFlowDirection = 41;
  if (this->biflowdirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->biflowdirection(), output);
  }

  // uint32 FlowDirection = 42;
  if (this->flowdirection() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->flowdirection(), output);
  }

  // uint32 IPv6ExtensionHeaders = 43;
  if (this->ipv6extensionheaders() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->ipv6extensionheaders(), output);
  }

  // uint32 Cid = 1000;
  if (this->cid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1000, this->cid(), output);
  }

  // string CidString = 1001;
  if (this->cidstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cidstring().data(), static_cast<int>(this->cidstring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.CidString");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1001, this->cidstring(), output);
  }

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  if (this->normalized() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1002, this->normalized(), output);
  }

  // string SrcIfName = 1003;
  if (this->srcifname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcifname().data(), static_cast<int>(this->srcifname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1003, this->srcifname(), output);
  }

  // string SrcIfDesc = 1004;
  if (this->srcifdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcifdesc().data(), static_cast<int>(this->srcifdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1004, this->srcifdesc(), output);
  }

  // uint32 SrcIfSpeed = 1005;
  if (this->srcifspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1005, this->srcifspeed(), output);
  }

  // string DstIfName = 1006;
  if (this->dstifname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstifname().data(), static_cast<int>(this->dstifname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1006, this->dstifname(), output);
  }

  // string DstIfDesc = 1007;
  if (this->dstifdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstifdesc().data(), static_cast<int>(this->dstifdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfDesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1007, this->dstifdesc(), output);
  }

  // uint32 DstIfSpeed = 1008;
  if (this->dstifspeed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1008, this->dstifspeed(), output);
  }

  // string ProtoName = 1009;
  if (this->protoname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protoname().data(), static_cast<int>(this->protoname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.ProtoName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1009, this->protoname(), output);
  }

  // string RemoteCountry = 1010;
  if (this->remotecountry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remotecountry().data(), static_cast<int>(this->remotecountry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.RemoteCountry");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1010, this->remotecountry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:flowmessageenriched.FlowMessage)
}

::google::protobuf::uint8* FlowMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:flowmessageenriched.FlowMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint64 TimeReceived = 2;
  if (this->timereceived() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->timereceived(), target);
  }

  // uint64 SamplingRate = 3;
  if (this->samplingrate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->samplingrate(), target);
  }

  // uint32 SequenceNum = 4;
  if (this->sequencenum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sequencenum(), target);
  }

  // uint64 TimeFlowEnd = 5;
  if (this->timeflowend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timeflowend(), target);
  }

  // bytes SrcAddr = 6;
  if (this->srcaddr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->srcaddr(), target);
  }

  // bytes DstAddr = 7;
  if (this->dstaddr().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dstaddr(), target);
  }

  // uint64 Bytes = 9;
  if (this->bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->bytes(), target);
  }

  // uint64 Packets = 10;
  if (this->packets() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->packets(), target);
  }

  // bytes SamplerAddress = 11;
  if (this->sampleraddress().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->sampleraddress(), target);
  }

  // bytes NextHop = 12;
  if (this->nexthop().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->nexthop(), target);
  }

  // uint32 NextHopAS = 13;
  if (this->nexthopas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->nexthopas(), target);
  }

  // uint32 SrcAS = 14;
  if (this->srcas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->srcas(), target);
  }

  // uint32 DstAS = 15;
  if (this->dstas() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->dstas(), target);
  }

  // uint32 SrcNet = 16;
  if (this->srcnet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->srcnet(), target);
  }

  // uint32 DstNet = 17;
  if (this->dstnet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->dstnet(), target);
  }

  // uint32 SrcIf = 18;
  if (this->srcif() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->srcif(), target);
  }

  // uint32 DstIf = 19;
  if (this->dstif() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->dstif(), target);
  }

  // uint32 Proto = 20;
  if (this->proto() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->proto(), target);
  }

  // uint32 SrcPort = 21;
  if (this->srcport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->srcport(), target);
  }

  // uint32 DstPort = 22;
  if (this->dstport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->dstport(), target);
  }

  // uint32 IPTos = 23;
  if (this->iptos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->iptos(), target);
  }

  // uint32 ForwardingStatus = 24;
  if (this->forwardingstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->forwardingstatus(), target);
  }

  // uint32 IPTTL = 25;
  if (this->ipttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->ipttl(), target);
  }

  // uint32 TCPFlags = 26;
  if (this->tcpflags() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->tcpflags(), target);
  }

  // uint64 SrcMac = 27;
  if (this->srcmac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->srcmac(), target);
  }

  // uint64 DstMac = 28;
  if (this->dstmac() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(28, this->dstmac(), target);
  }

  // uint32 VlanId = 29;
  if (this->vlanid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->vlanid(), target);
  }

  // uint32 Etype = 30;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->etype(), target);
  }

  // uint32 IcmpType = 31;
  if (this->icmptype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->icmptype(), target);
  }

  // uint32 IcmpCode = 32;
  if (this->icmpcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->icmpcode(), target);
  }

  // uint32 SrcVlan = 33;
  if (this->srcvlan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->srcvlan(), target);
  }

  // uint32 DstVlan = 34;
  if (this->dstvlan() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->dstvlan(), target);
  }

  // uint32 FragmentId = 35;
  if (this->fragmentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(35, this->fragmentid(), target);
  }

  // uint32 FragmentOffset = 36;
  if (this->fragmentoffset() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->fragmentoffset(), target);
  }

  // uint32 IPv6FlowLabel = 37;
  if (this->ipv6flowlabel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->ipv6flowlabel(), target);
  }

  // uint64 TimeFlowStart = 38;
  if (this->timeflowstart() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(38, this->timeflowstart(), target);
  }

  // uint32 IngressVrfID = 39;
  if (this->ingressvrfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(39, this->ingressvrfid(), target);
  }

  // uint32 EgressVrfID = 40;
  if (this->egressvrfid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->egressvrfid(), target);
  }

  // uint32 BiFlowDirection = 41;
  if (this->biflowdirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->biflowdirection(), target);
  }

  // uint32 FlowDirection = 42;
  if (this->flowdirection() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->flowdirection(), target);
  }

  // uint32 IPv6ExtensionHeaders = 43;
  if (this->ipv6extensionheaders() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(43, this->ipv6extensionheaders(), target);
  }

  // uint32 Cid = 1000;
  if (this->cid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1000, this->cid(), target);
  }

  // string CidString = 1001;
  if (this->cidstring().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cidstring().data(), static_cast<int>(this->cidstring().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.CidString");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1001, this->cidstring(), target);
  }

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  if (this->normalized() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1002, this->normalized(), target);
  }

  // string SrcIfName = 1003;
  if (this->srcifname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcifname().data(), static_cast<int>(this->srcifname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1003, this->srcifname(), target);
  }

  // string SrcIfDesc = 1004;
  if (this->srcifdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srcifdesc().data(), static_cast<int>(this->srcifdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.SrcIfDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1004, this->srcifdesc(), target);
  }

  // uint32 SrcIfSpeed = 1005;
  if (this->srcifspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1005, this->srcifspeed(), target);
  }

  // string DstIfName = 1006;
  if (this->dstifname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstifname().data(), static_cast<int>(this->dstifname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1006, this->dstifname(), target);
  }

  // string DstIfDesc = 1007;
  if (this->dstifdesc().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dstifdesc().data(), static_cast<int>(this->dstifdesc().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.DstIfDesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1007, this->dstifdesc(), target);
  }

  // uint32 DstIfSpeed = 1008;
  if (this->dstifspeed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1008, this->dstifspeed(), target);
  }

  // string ProtoName = 1009;
  if (this->protoname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protoname().data(), static_cast<int>(this->protoname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.ProtoName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1009, this->protoname(), target);
  }

  // string RemoteCountry = 1010;
  if (this->remotecountry().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remotecountry().data(), static_cast<int>(this->remotecountry().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "flowmessageenriched.FlowMessage.RemoteCountry");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1010, this->remotecountry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:flowmessageenriched.FlowMessage)
  return target;
}

size_t FlowMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:flowmessageenriched.FlowMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes SrcAddr = 6;
  if (this->srcaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->srcaddr());
  }

  // bytes DstAddr = 7;
  if (this->dstaddr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dstaddr());
  }

  // bytes SamplerAddress = 11;
  if (this->sampleraddress().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sampleraddress());
  }

  // bytes NextHop = 12;
  if (this->nexthop().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->nexthop());
  }

  // string CidString = 1001;
  if (this->cidstring().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cidstring());
  }

  // string SrcIfName = 1003;
  if (this->srcifname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcifname());
  }

  // string SrcIfDesc = 1004;
  if (this->srcifdesc().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcifdesc());
  }

  // string DstIfName = 1006;
  if (this->dstifname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dstifname());
  }

  // string DstIfDesc = 1007;
  if (this->dstifdesc().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dstifdesc());
  }

  // string ProtoName = 1009;
  if (this->protoname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protoname());
  }

  // string RemoteCountry = 1010;
  if (this->remotecountry().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remotecountry());
  }

  // uint64 TimeReceived = 2;
  if (this->timereceived() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timereceived());
  }

  // .flowmessageenriched.FlowMessage.FlowType Type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 SequenceNum = 4;
  if (this->sequencenum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequencenum());
  }

  // uint64 SamplingRate = 3;
  if (this->samplingrate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->samplingrate());
  }

  // uint64 TimeFlowEnd = 5;
  if (this->timeflowend() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timeflowend());
  }

  // uint64 Bytes = 9;
  if (this->bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->bytes());
  }

  // uint64 Packets = 10;
  if (this->packets() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->packets());
  }

  // uint32 NextHopAS = 13;
  if (this->nexthopas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->nexthopas());
  }

  // uint32 SrcAS = 14;
  if (this->srcas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcas());
  }

  // uint32 DstAS = 15;
  if (this->dstas() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstas());
  }

  // uint32 SrcNet = 16;
  if (this->srcnet() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcnet());
  }

  // uint32 DstNet = 17;
  if (this->dstnet() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstnet());
  }

  // uint32 SrcIf = 18;
  if (this->srcif() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcif());
  }

  // uint32 DstIf = 19;
  if (this->dstif() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstif());
  }

  // uint32 Proto = 20;
  if (this->proto() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->proto());
  }

  // uint32 SrcPort = 21;
  if (this->srcport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcport());
  }

  // uint32 DstPort = 22;
  if (this->dstport() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstport());
  }

  // uint32 IPTos = 23;
  if (this->iptos() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->iptos());
  }

  // uint32 ForwardingStatus = 24;
  if (this->forwardingstatus() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->forwardingstatus());
  }

  // uint32 IPTTL = 25;
  if (this->ipttl() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipttl());
  }

  // uint32 TCPFlags = 26;
  if (this->tcpflags() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tcpflags());
  }

  // uint64 SrcMac = 27;
  if (this->srcmac() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->srcmac());
  }

  // uint64 DstMac = 28;
  if (this->dstmac() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->dstmac());
  }

  // uint32 VlanId = 29;
  if (this->vlanid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->vlanid());
  }

  // uint32 Etype = 30;
  if (this->etype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->etype());
  }

  // uint32 IcmpType = 31;
  if (this->icmptype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icmptype());
  }

  // uint32 IcmpCode = 32;
  if (this->icmpcode() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->icmpcode());
  }

  // uint32 SrcVlan = 33;
  if (this->srcvlan() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcvlan());
  }

  // uint32 DstVlan = 34;
  if (this->dstvlan() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstvlan());
  }

  // uint32 FragmentId = 35;
  if (this->fragmentid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fragmentid());
  }

  // uint32 FragmentOffset = 36;
  if (this->fragmentoffset() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->fragmentoffset());
  }

  // uint64 TimeFlowStart = 38;
  if (this->timeflowstart() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timeflowstart());
  }

  // uint32 IPv6FlowLabel = 37;
  if (this->ipv6flowlabel() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipv6flowlabel());
  }

  // uint32 IngressVrfID = 39;
  if (this->ingressvrfid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ingressvrfid());
  }

  // uint32 EgressVrfID = 40;
  if (this->egressvrfid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->egressvrfid());
  }

  // uint32 BiFlowDirection = 41;
  if (this->biflowdirection() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->biflowdirection());
  }

  // uint32 FlowDirection = 42;
  if (this->flowdirection() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flowdirection());
  }

  // uint32 IPv6ExtensionHeaders = 43;
  if (this->ipv6extensionheaders() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ipv6extensionheaders());
  }

  // uint32 Cid = 1000;
  if (this->cid() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cid());
  }

  // .flowmessageenriched.FlowMessage.NormalizedType Normalized = 1002;
  if (this->normalized() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->normalized());
  }

  // uint32 SrcIfSpeed = 1005;
  if (this->srcifspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->srcifspeed());
  }

  // uint32 DstIfSpeed = 1008;
  if (this->dstifspeed() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dstifspeed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:flowmessageenriched.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowMessage* source =
      ::google::protobuf::DynamicCastToGenerated<FlowMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:flowmessageenriched.FlowMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:flowmessageenriched.FlowMessage)
    MergeFrom(*source);
  }
}

void FlowMessage::MergeFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:flowmessageenriched.FlowMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.srcaddr().size() > 0) {

    srcaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcaddr_);
  }
  if (from.dstaddr().size() > 0) {

    dstaddr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstaddr_);
  }
  if (from.sampleraddress().size() > 0) {

    sampleraddress_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sampleraddress_);
  }
  if (from.nexthop().size() > 0) {

    nexthop_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nexthop_);
  }
  if (from.cidstring().size() > 0) {

    cidstring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cidstring_);
  }
  if (from.srcifname().size() > 0) {

    srcifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcifname_);
  }
  if (from.srcifdesc().size() > 0) {

    srcifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcifdesc_);
  }
  if (from.dstifname().size() > 0) {

    dstifname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstifname_);
  }
  if (from.dstifdesc().size() > 0) {

    dstifdesc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dstifdesc_);
  }
  if (from.protoname().size() > 0) {

    protoname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protoname_);
  }
  if (from.remotecountry().size() > 0) {

    remotecountry_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remotecountry_);
  }
  if (from.timereceived() != 0) {
    set_timereceived(from.timereceived());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.sequencenum() != 0) {
    set_sequencenum(from.sequencenum());
  }
  if (from.samplingrate() != 0) {
    set_samplingrate(from.samplingrate());
  }
  if (from.timeflowend() != 0) {
    set_timeflowend(from.timeflowend());
  }
  if (from.bytes() != 0) {
    set_bytes(from.bytes());
  }
  if (from.packets() != 0) {
    set_packets(from.packets());
  }
  if (from.nexthopas() != 0) {
    set_nexthopas(from.nexthopas());
  }
  if (from.srcas() != 0) {
    set_srcas(from.srcas());
  }
  if (from.dstas() != 0) {
    set_dstas(from.dstas());
  }
  if (from.srcnet() != 0) {
    set_srcnet(from.srcnet());
  }
  if (from.dstnet() != 0) {
    set_dstnet(from.dstnet());
  }
  if (from.srcif() != 0) {
    set_srcif(from.srcif());
  }
  if (from.dstif() != 0) {
    set_dstif(from.dstif());
  }
  if (from.proto() != 0) {
    set_proto(from.proto());
  }
  if (from.srcport() != 0) {
    set_srcport(from.srcport());
  }
  if (from.dstport() != 0) {
    set_dstport(from.dstport());
  }
  if (from.iptos() != 0) {
    set_iptos(from.iptos());
  }
  if (from.forwardingstatus() != 0) {
    set_forwardingstatus(from.forwardingstatus());
  }
  if (from.ipttl() != 0) {
    set_ipttl(from.ipttl());
  }
  if (from.tcpflags() != 0) {
    set_tcpflags(from.tcpflags());
  }
  if (from.srcmac() != 0) {
    set_srcmac(from.srcmac());
  }
  if (from.dstmac() != 0) {
    set_dstmac(from.dstmac());
  }
  if (from.vlanid() != 0) {
    set_vlanid(from.vlanid());
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
  if (from.icmptype() != 0) {
    set_icmptype(from.icmptype());
  }
  if (from.icmpcode() != 0) {
    set_icmpcode(from.icmpcode());
  }
  if (from.srcvlan() != 0) {
    set_srcvlan(from.srcvlan());
  }
  if (from.dstvlan() != 0) {
    set_dstvlan(from.dstvlan());
  }
  if (from.fragmentid() != 0) {
    set_fragmentid(from.fragmentid());
  }
  if (from.fragmentoffset() != 0) {
    set_fragmentoffset(from.fragmentoffset());
  }
  if (from.timeflowstart() != 0) {
    set_timeflowstart(from.timeflowstart());
  }
  if (from.ipv6flowlabel() != 0) {
    set_ipv6flowlabel(from.ipv6flowlabel());
  }
  if (from.ingressvrfid() != 0) {
    set_ingressvrfid(from.ingressvrfid());
  }
  if (from.egressvrfid() != 0) {
    set_egressvrfid(from.egressvrfid());
  }
  if (from.biflowdirection() != 0) {
    set_biflowdirection(from.biflowdirection());
  }
  if (from.flowdirection() != 0) {
    set_flowdirection(from.flowdirection());
  }
  if (from.ipv6extensionheaders() != 0) {
    set_ipv6extensionheaders(from.ipv6extensionheaders());
  }
  if (from.cid() != 0) {
    set_cid(from.cid());
  }
  if (from.normalized() != 0) {
    set_normalized(from.normalized());
  }
  if (from.srcifspeed() != 0) {
    set_srcifspeed(from.srcifspeed());
  }
  if (from.dstifspeed() != 0) {
    set_dstifspeed(from.dstifspeed());
  }
}

void FlowMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:flowmessageenriched.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowMessage::CopyFrom(const FlowMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:flowmessageenriched.FlowMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowMessage::IsInitialized() const {
  return true;
}

void FlowMessage::Swap(FlowMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FlowMessage::InternalSwap(FlowMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  srcaddr_.Swap(&other->srcaddr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dstaddr_.Swap(&other->dstaddr_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sampleraddress_.Swap(&other->sampleraddress_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nexthop_.Swap(&other->nexthop_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  cidstring_.Swap(&other->cidstring_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  srcifname_.Swap(&other->srcifname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  srcifdesc_.Swap(&other->srcifdesc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dstifname_.Swap(&other->dstifname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dstifdesc_.Swap(&other->dstifdesc_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protoname_.Swap(&other->protoname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remotecountry_.Swap(&other->remotecountry_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timereceived_, other->timereceived_);
  swap(type_, other->type_);
  swap(sequencenum_, other->sequencenum_);
  swap(samplingrate_, other->samplingrate_);
  swap(timeflowend_, other->timeflowend_);
  swap(bytes_, other->bytes_);
  swap(packets_, other->packets_);
  swap(nexthopas_, other->nexthopas_);
  swap(srcas_, other->srcas_);
  swap(dstas_, other->dstas_);
  swap(srcnet_, other->srcnet_);
  swap(dstnet_, other->dstnet_);
  swap(srcif_, other->srcif_);
  swap(dstif_, other->dstif_);
  swap(proto_, other->proto_);
  swap(srcport_, other->srcport_);
  swap(dstport_, other->dstport_);
  swap(iptos_, other->iptos_);
  swap(forwardingstatus_, other->forwardingstatus_);
  swap(ipttl_, other->ipttl_);
  swap(tcpflags_, other->tcpflags_);
  swap(srcmac_, other->srcmac_);
  swap(dstmac_, other->dstmac_);
  swap(vlanid_, other->vlanid_);
  swap(etype_, other->etype_);
  swap(icmptype_, other->icmptype_);
  swap(icmpcode_, other->icmpcode_);
  swap(srcvlan_, other->srcvlan_);
  swap(dstvlan_, other->dstvlan_);
  swap(fragmentid_, other->fragmentid_);
  swap(fragmentoffset_, other->fragmentoffset_);
  swap(timeflowstart_, other->timeflowstart_);
  swap(ipv6flowlabel_, other->ipv6flowlabel_);
  swap(ingressvrfid_, other->ingressvrfid_);
  swap(egressvrfid_, other->egressvrfid_);
  swap(biflowdirection_, other->biflowdirection_);
  swap(flowdirection_, other->flowdirection_);
  swap(ipv6extensionheaders_, other->ipv6extensionheaders_);
  swap(cid_, other->cid_);
  swap(normalized_, other->normalized_);
  swap(srcifspeed_, other->srcifspeed_);
  swap(dstifspeed_, other->dstifspeed_);
}

::google::protobuf::Metadata FlowMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_flow_2dmessages_2denriched_2eproto);
  return ::file_level_metadata_flow_2dmessages_2denriched_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace flowmessageenriched
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::flowmessageenriched::FlowMessage* Arena::CreateMaybeMessage< ::flowmessageenriched::FlowMessage >(Arena* arena) {
  return Arena::CreateInternal< ::flowmessageenriched::FlowMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
